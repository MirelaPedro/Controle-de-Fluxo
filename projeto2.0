#include <WiFi.h>
#include <PubSubClient.h>

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_APDS9960.h>

#define SCREEN_WIDTH 128 // Largura do OLED em pixels
#define SCREEN_HEIGHT 64 // Altura do OLED em pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Criacao do objeto para leitura do sensor
Adafruit_APDS9960 apds;

// WiFi
const char* ssid = "SATC IOT"; // Nome do WiFi
const char* password = "IOT2024@#";  // Senha do WiFi

// MQTT Broker NÃO CONECTADO!!!!!
const char *broker = "test.mosquitto.org"; //Broker 
const char *topic = "mirela/porta"; //Tópico de publicação
const char *mqtt_username = "mirela"; //Nome de usuário?
const char *mqtt_password = "12345678"; //Senha do Usuário?
const int port = 1883; 

WiFiClient espClient;
PubSubClient client(espClient);

int people = 0;
int tempo = 0;

void setup_wifi() {
  // Conectando ao WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.println("Connecting to WiFi..");
  }

  // Conectado ao WiFi
  Serial.println();
  Serial.print("Connected to ");
  Serial.println(ssid);

}

void callback(char *topic, byte *payload, unsigned int length) {
    Serial.print("Message arrived in topic: ");
    Serial.println(topic);
    Serial.print("Message:");
    for (int i = 0; i < length; i++) {
        Serial.print((char) payload[i]);
    }
    Serial.println();
    Serial.println("-----------------------");
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}



void setup() {
  Serial.begin(115200);
  //Configurando e conectando ao WiFi
  setup_wifi();
  //Conectando ao Broker
  client.setServer(broker, port);
  //
  client.setCallback(callback);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(2000);
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);

  // Inicializacao da comunicacao I2C com o sensor
  if ( apds.begin() ) {
    Serial.println("Sensor APDS-9960 iniciado com sucesso!");
  } else {
    Serial.println("Falha na inicializacao do sensor...");
  }
  
  apds.enableProximity(true);
  apds.enableGesture(true);
}

void loop() {
  
 if (!client.connected()) {
    reconnect();
  }
  client.loop();

  uint8_t gesture = apds.readGesture();

  switch (gesture) {
    case APDS9960_DOWN:
    people -= 1;
    client.publish("mirela/porta", people);
    break;
    
    case APDS9960_UP:
    people += 1;
    client.publish("mirela/porta", people);
    break;

    default:
    break;
  }

  display.println("Ocupação atual: ", people, " pessoas.");
  display.display();

  if(people <= 0){
    digitalWrite(lampada_1, LOW);
    digitalWrite(lampada_2, LOW);
    digitalWrite(lampada_3, LOW);
  }
  else{
    digitalWrite(lampada_1, HIGH);
    digitalWrite(lampada_2, HIGH);
    digitalWrite(lampada_3, HIGH);
  }
  
}
